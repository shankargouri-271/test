Hereâ€™s a list of commonly used Git commands, categorized by purpose:

Getting Started
Initialize a repository:
bash
Copy code
git init
Clone a repository:
bash
Copy code
git clone <repository_url>
Basic Operations
Check repository status:
bash
Copy code
git status
Add files to staging area:
bash
Copy code
git add <file>        # Add specific file
git add .             # Add all files
Commit changes:
bash
Copy code
git commit -m "Commit message"
View commit history:
bash
Copy code
git log
git log --oneline     # Compact view
Branching
List branches:
bash
Copy code
git branch
Create a new branch:
bash
Copy code
git branch <branch_name>
Switch branches:
bash
Copy code
git checkout <branch_name>
git switch <branch_name>
Create and switch to a new branch:
bash
Copy code
git checkout -b <branch_name>
git switch -c <branch_name>
Merging and Rebasing
Merge a branch into the current branch:
bash
Copy code
git merge <branch_name>
Rebase branch:
bash
Copy code
git rebase <branch_name>
Remote Repositories
View remote repositories:
bash
Copy code
git remote -v
Add a remote repository:
bash
Copy code
git remote add <name> <repository_url>
Fetch changes from remote:
bash
Copy code
git fetch <remote>
Pull changes from remote:
bash
Copy code
git pull <remote> <branch>
Push changes to remote:
bash
Copy code
git push <remote> <branch>
Stashing
Stash changes:
bash
Copy code
git stash
Apply stash:
bash
Copy code
git stash apply
List stashes:
bash
Copy code
git stash list
Undo Changes
Unstage files:
bash
Copy code
git reset <file>
git reset .
Discard changes:
bash
Copy code
git checkout -- <file>
Reset to a previous commit:
bash
Copy code
git reset --soft <commit_hash>   # Keep changes staged
git reset --mixed <commit_hash>  # Keep changes in working directory
git reset --hard <commit_hash>   # Discard all changes
Tagging
Create a tag:
bash
Copy code
git tag <tag_name>
Push tags to remote:
bash
Copy code
git push <remote> <tag_name>
Advanced
View differences:
bash
Copy code
git diff
git diff <branch_1> <branch_2>
Cherry-pick a commit:
bash
Copy code
git cherry-pick <commit_hash>
Squash commits (interactive rebase):
bash
Copy code
git rebase -i <base_commit>
Resolve merge conflicts:
bash
Copy code
# Edit conflicting files
git add <file>          # Mark resolved
git rebase --continue   # Or git merge --continue
